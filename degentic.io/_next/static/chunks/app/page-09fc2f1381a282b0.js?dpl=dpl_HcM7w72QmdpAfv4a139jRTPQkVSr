(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [58974], {
        10061: (e, t, n) => {
            Promise.resolve().then(n.bind(n, 22413))
        },
        22413: (e, t, n) => {
            "use strict";
            n.r(t), n.d(t, {
                default: () => B
            });
            var s = n(95155),
                a = n(12115);
            let i = e => {
                let {
                    activeTab: t,
                    setActiveTab: n
                } = e;
                return (0, s.jsxs)("div", {
                    className: "flex border border-[#4E4E4E] p-[2px] rounded-[8px]",
                    children: [(0, s.jsxs)("button", {
                        className: "cursor-pointer text-base font-bold py-1 px-4 rounded-[6px] ".concat("all" === t ? "bg-[#131619] text-[#53D0B0] border border-[#4E4E4E]" : " text-white hover:bg-stone-900"),
                        onClick: () => n("all"),
                        children: ["All ", (0, s.jsx)("span", {
                            className: "hidden sm:inline-block",
                            children: "Predictions"
                        })]
                    }), (0, s.jsxs)("button", {
                        className: "cursor-pointer text-base font-bold py-1 px-4 rounded-[6px] ".concat("live" === t ? "bg-[#131619] text-[#53D0B0] border border-[#4E4E4E]" : "text-white hover:bg-stone-900"),
                        onClick: () => n("live"),
                        children: ["Live ", (0, s.jsx)("span", {
                            className: "hidden sm:inline-block",
                            children: "Predictions"
                        })]
                    }), (0, s.jsxs)("button", {
                        className: "cursor-pointer text-base font-bold py-1 px-4 rounded-[6px] ".concat("yours" === t ? "bg-[#131619] text-[#53D0B0] border border-[#4E4E4E]" : "text-white hover:bg-stone-900"),
                        onClick: () => n("yours"),
                        children: ["Your", (0, s.jsx)("span", {
                            className: "sm:hidden",
                            children: "s"
                        }), " ", (0, s.jsx)("span", {
                            className: "hidden sm:inline-block",
                            children: "Predictions"
                        })]
                    })]
                })
            };
            var r = n(7345),
                l = n(87729),
                o = n(71391),
                d = n(38472),
                c = n(40297),
                u = n(89888),
                m = n(32206),
                x = n(32068),
                h = n(64106),
                f = n(78144),
                g = n(97727),
                p = n(41112);
            let b = (0, x.P)({
                    client: h.S,
                    chain: f.E,
                    address: l.TI
                }),
                v = (0, x.P)({
                    client: h.S,
                    chain: f.E,
                    address: l.gB,
                    abi: d.xw
                }),
                j = (0, x.P)({
                    client: h.S,
                    chain: f.E,
                    address: l.u3
                }),
                w = e => {
                    let t, n, i, {
                            betsToShow: d
                        } = e,
                        x = (0, g.L)(),
                        [h, f] = (0, a.useState)(0),
                        [w, B] = (0, a.useState)(0),
                        [E, y] = (0, a.useState)([]),
                        [C, N] = (0, a.useState)([]),
                        {
                            data: F
                        } = (0, p.Q)({
                            contract: b,
                            method: "function getUserBalanceWithCredits(address user) returns (uint256)",
                            params: [(null == x ? void 0 : x.address) || c.Xd],
                            queryOptions: {
                                enabled: void 0 != x,
                                refetchInterval: 3e3
                            }
                        }),
                        {
                            data: S
                        } = (0, p.Q)({
                            contract: v,
                            method: "allowance",
                            params: [(null == x ? void 0 : x.address) || c.Xd, l.TI],
                            queryOptions: {
                                enabled: !!x,
                                refetchInterval: 3e3
                            }
                        }),
                        {
                            data: k
                        } = (0, p.Q)({
                            contract: b,
                            method: "function getActiveBetContestsIDs() returns (uint256[])",
                            params: [],
                            queryOptions: {
                                refetchInterval: 3e3
                            }
                        }),
                        {
                            data: A
                        } = (0, p.Q)({
                            contract: b,
                            method: "function batchGetBetContests(uint256[]) returns ((string, uint256[], string[], uint256, uint256, uint8, address[], uint256, uint256, bool, string[])[])",
                            params: [k || []],
                            queryOptions: {
                                enabled: k && k.length > 0,
                                refetchInterval: 3e3
                            }
                        }),
                        {
                            data: D
                        } = (0, p.Q)({
                            contract: j,
                            method: "function batchUserBets(uint256[], address) returns (uint256[][])",
                            params: [k || [], (null == x ? void 0 : x.address) || c.Xd],
                            queryOptions: {
                                enabled: k && k.length > 0 && !!x,
                                refetchInterval: 3e3
                            }
                        });
                    (0, a.useEffect)(() => {
                        f(parseFloat((0, u.J)(F || BigInt(0), l.eC)))
                    }, [
                        [F]
                    ]), (0, a.useEffect)(() => {
                        S && B(parseFloat((0, u.J)(S, l.eC)))
                    }, [S]), (0, a.useEffect)(() => {
                        A && k && k.length == A.length && y(A.map((e, t) => ({
                            id: parseInt(k[t].toString()),
                            betName: e[0],
                            optionBetAmounts: e[1].map(e => parseFloat((0, u.J)(e, l.eC))),
                            optionNames: e[2],
                            bettingStartTime: parseInt(e[3].toString()),
                            bettingEndTime: parseInt(e[4].toString()),
                            winningOption: e[5],
                            betters: e[6],
                            refundModeEnabled: e[9],
                            metadata: e[10]
                        })).reverse())
                    }, [A, k]), (0, a.useEffect)(() => {
                        D && N(D.map((e, t) => e.map(e => parseFloat((0, u.J)(e, l.eC)))))
                    }, [D, k]);
                    let [I, T] = a.useState(!1);
                    if ((0, a.useEffect)(() => {
                            T(!0), setTimeout(() => {
                                T(!1)
                            }, 500)
                        }, [d]), I) return (0, s.jsxs)("div", {
                        className: "flex flex-col gap-4",
                        children: [(0, s.jsx)(o.J, {}), (0, s.jsx)(o.J, {})]
                    });
                    let L = () => {
                            if (E && E.length > 0) {
                                let e = E.find(e => e.betName.toLowerCase().includes("next to go"));
                                if (e) return e
                            }
                        },
                        O = e => {
                            if (E && E.length > 0) {
                                let t = L(),
                                    n = t ? E.filter(e => e.id !== (null == t ? void 0 : t.id)) : E;
                                if ("all" == e);
                                else if ("live" == e) return n.filter(e => (0, m.kz)(e.bettingEndTime) > 0);
                                else if ("yours" == e) return x ? n.filter(e => e.betters.includes(x.address)) : n;
                                return n
                            }
                            return []
                        },
                        P = e => {
                            if (E && E.length > 0) {
                                if ("all" == e);
                                else if ("live" == e) return E.filter(e => (0, m.kz)(e.bettingEndTime) > 0);
                                else if ("yours" == e) return x ? E.filter(e => e.betters.includes(x.address)) : E;
                                return E
                            }
                            return []
                        },
                        W = (e, t) => {
                            if (!e) return !1;
                            if ("all" === t);
                            else if ("live" === t) return (0, m.kz)(e.bettingEndTime) > 0;
                            else if ("yours" === t) return !!x && e.betters.includes(x.address);
                            return !0
                        },
                        J = L(),
                        $ = e => {
                            if (C && C.length > 0) {
                                let t = null == k ? void 0 : k.findIndex(t => t === BigInt(e.id));
                                if (void 0 !== t && t >= 0) return C[t]
                            }
                            return []
                        };
                    return (0, s.jsxs)(s.Fragment, {
                        children: ["all" === d && (0, s.jsx)(s.Fragment, {
                            children: (t = "all", E && P("all").length > 0) ? (0, s.jsxs)(s.Fragment, {
                                children: [W(J, "all") && J && (0, s.jsx)(r.A, {
                                    betContest: J,
                                    isConnected: !!x,
                                    address: null == x ? void 0 : x.address,
                                    walletBalance: h || 0,
                                    formattedWalletBalance: "$".concat((h || 0).toLocaleString([], {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    })),
                                    allowance: w || 0,
                                    sticky: !0,
                                    userBetAmounts: $(J)
                                }, J.id), O("all").map(e => (0, s.jsx)(r.A, {
                                    betContest: e,
                                    isConnected: !!x,
                                    address: null == x ? void 0 : x.address,
                                    walletBalance: h || 0,
                                    formattedWalletBalance: "$".concat((h || 0).toLocaleString([], {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    })),
                                    allowance: w || 0,
                                    userBetAmounts: $(e)
                                }, e.id))]
                            }) : (0, s.jsx)("div", {
                                className: "min-h-[30vh] flex justify-center items-center text-white text-center",
                                children: "No predictions available at the moment."
                            })
                        }), "live" === d && (0, s.jsx)(s.Fragment, {
                            children: (n = "live", E && P(n).length > 0) ? (0, s.jsxs)(s.Fragment, {
                                children: [W(J, "live") && J && (0, s.jsx)(r.A, {
                                    betContest: J,
                                    isConnected: !!x,
                                    address: null == x ? void 0 : x.address,
                                    walletBalance: h || 0,
                                    formattedWalletBalance: "$".concat((h || 0).toLocaleString([], {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    })),
                                    allowance: w || 0,
                                    sticky: !0,
                                    userBetAmounts: $(J)
                                }, J.id), O("live").map(e => (0, s.jsx)(r.A, {
                                    betContest: e,
                                    isConnected: !!x,
                                    address: null == x ? void 0 : x.address,
                                    walletBalance: h || 0,
                                    formattedWalletBalance: "$".concat((h || 0).toLocaleString([], {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    })),
                                    allowance: w || 0,
                                    userBetAmounts: $(e)
                                }, e.id))]
                            }) : (0, s.jsx)("div", {
                                className: "min-h-[30vh] flex justify-center items-center text-white text-center",
                                children: "No live predictions available at the moment."
                            })
                        }), "yours" === d && (0, s.jsx)(s.Fragment, {
                            children: (i = "yours", E && P(i).length > 0) ? (0, s.jsxs)(s.Fragment, {
                                children: [W(J, "yours") && J && (0, s.jsx)(r.A, {
                                    betContest: J,
                                    isConnected: !!x,
                                    address: null == x ? void 0 : x.address,
                                    walletBalance: h || 0,
                                    formattedWalletBalance: "$".concat((h || 0).toLocaleString([], {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    })),
                                    allowance: w || 0,
                                    sticky: !0,
                                    userBetAmounts: $(J)
                                }, J.id), O("yours").map(e => (0, s.jsx)(r.A, {
                                    betContest: e,
                                    isConnected: !!x,
                                    address: null == x ? void 0 : x.address,
                                    walletBalance: h || 0,
                                    formattedWalletBalance: "$".concat((h || 0).toLocaleString([], {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    })),
                                    allowance: w || 0,
                                    userBetAmounts: $(e)
                                }, e.id))]
                            }) : (0, s.jsx)("div", {
                                className: "min-h-[30vh] flex justify-center items-center text-white text-center",
                                children: "You haven't placed any predictions yet."
                            })
                        })]
                    })
                };

            function B() {
                let [e, t] = (0, a.useState)("all");
                return (0, s.jsx)("div", {
                    className: "min-h-screen p-4 pb-10 gap-16 sm:p-10 lg:px-20 lg:py-10",
                    children: (0, s.jsxs)("main", {
                        className: "flex flex-col gap-6 sm:gap-8 row-start-2 items-center sm:items-start",
                        children: [(0, s.jsx)("div", {
                            className: "w-full flex justify-center",
                            children: (0, s.jsx)(i, {
                                activeTab: e,
                                setActiveTab: t
                            })
                        }), (0, s.jsx)("div", {
                            className: "w-full max-w-4xl mx-auto flex flex-col gap-8",
                            children: (0, s.jsx)(w, {
                                betsToShow: e
                            })
                        })]
                    })
                })
            }
        }
    },
    e => {
        var t = t => e(e.s = t);
        e.O(0, [85105, 21698, 16914, 5565, 35374, 44652, 35449, 38525, 78159, 28441, 86587, 77358], () => t(10061)), _N_E = e.O()
    }
]);